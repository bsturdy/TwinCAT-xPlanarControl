<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="xPlanarControl" Id="{418f5a4e-4a80-43af-8346-cac2175cf5a1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK xPlanarControl
VAR
	
	// xPlanar objects
	_PlanarMover				: ARRAY [1.._MoverCount] OF MC_PlanarMover;
	_PlanarMoverFeedback		: ARRAY [1.._MoverCount] OF MC_PlanarFeedback;
	_PlanarGroup				: MC_PlanarGroup;
	_PlanarGroupFeedback		: MC_PlanarFeedback;
	_PlanarEnvironment			: MC_PlanarEnvironment;
	_PlanarEnvironmentFeedback	: MC_PlanarFeedback;
	_PlanarTrack				: ARRAY [1.._TrackCount] OF MC_PlanarTrack;
	_PlanarTrackFeedback		: ARRAY [1.._TrackCount] OF MC_PlanarFeedback;
	_MoveParameters				: ARRAY [1.._MoverCount] OF ST_MoverParameters;
	
	// Internal states and counters
	_i							: UINT := 0;
	_LocalState					: UINT := 0;
	_InternalCounter			: UINT := 0;
	_ErrorCount					: UINT := 0;
	_CommandDone				: BOOL := FALSE;
	
	// Status of movers
	_Enabled					: ARRAY [1.._MoverCount] OF BOOL;
	_Error						: ARRAY [1.._MoverCount] OF BOOL;
	_ErrorCode					: ARRAY [1.._MoverCount] OF UDINT;
	_ErrorCodePrevious			: ARRAY [1.._MoverCount] OF UDINT;
	_Busy						: ARRAY [1.._MoverCount] OF BOOL;
	_Done						: ARRAY [1.._MoverCount] OF BOOL;
	
	// Parameters of movers
	_Velocity					: LREAL := 2000;
	_Acceleration				: LREAL := 20000;
	_Deceleration				: LREAL := 20000;
	_Jerk						: LREAL := 200000;
	_NumberOfRotations			: UDINT := 5;
	
END_VAR
VAR CONSTANT
	
	// Number of movers
	_MoverCount					: UINT := 2;
	
	// Unused in production
	_TrackCount					: UINT := 3;

END_VAR]]></Declaration>
    <Implementation>
      <NWL>
        <XmlArchive>
          <Data>
            <o xml:space="preserve" t="NWLImplementationObject">
              <v n="NetworkListComment">""</v>
              <v n="DefaultViewMode">"Fbd"</v>
              <l2 n="NetworkList" cet="Network">
                <o>
                  <v n="ILActive">false</v>
                  <v n="FBDValid">false</v>
                  <v n="ILValid">false</v>
                  <l2 n="ILLines" />
                  <v n="Comment">""</v>
                  <v n="Title">""</v>
                  <v n="Label">""</v>
                  <v n="OutCommented">false</v>
                  <l2 n="NetworkItems" />
                  <l2 n="Connectors" />
                  <v n="Id">9L</v>
                </o>
              </l2>
              <v n="BranchCounter">1</v>
              <v n="ValidIds">true</v>
            </o>
          </Data>
          <TypeList>
            <Type n="Boolean">System.Boolean</Type>
            <Type n="Int32">System.Int32</Type>
            <Type n="Int64">System.Int64</Type>
            <Type n="Network">{d9a99d73-b633-47db-b876-a752acb25871}</Type>
            <Type n="NWLImplementationObject">{25e509de-33d4-4447-93f8-c9e4ea381c8b}</Type>
            <Type n="String">System.String</Type>
          </TypeList>
        </XmlArchive>
      </NWL>
    </Implementation>
    <Folder Name="Methods" Id="{2d820bc0-a9a0-4644-859d-9983f3034247}">
      <Folder Name="Collision Avoidance" Id="{eecc4bac-6acf-406a-a217-b8a90f1c3216}" />
      <Folder Name="Movements 2-Tile" Id="{564f56f8-bb5c-4eca-8a56-c64a7594c15d}" />
      <Folder Name="Movements General" Id="{aee95a18-140d-4ee9-ac40-69e7d69f9acf}" />
      <Folder Name="Power, Updates and Errors" Id="{c5ba77ca-a5ce-43bc-a81f-9b9628e1d54c}" />
      <Folder Name="Utility" Id="{859f915d-8d15-4358-93a7-bf99aa3a769f}" />
    </Folder>
    <Folder Name="Properties" Id="{0453768e-2223-4ce2-b57c-26f2fb086bed}">
      <Folder Name="Mover Attributes" Id="{55d9eb81-aa28-4943-ab68-008b0241e025}" />
      <Folder Name="Mover State" Id="{aacac47d-b1ac-450f-aed7-1cf5f67c5c41}" />
    </Folder>
    <Method Name="CaAddAllMoversToGroup" Id="{6307ad6c-536a-486b-9bc7-5654c14271b5}" FolderPath="Methods\Collision Avoidance\">
      <Declaration><![CDATA[METHOD CaAddAllMoversToGroup : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// WIP
// Enable planar group and add all movers

CASE _LocalState OF
	
	0:
		_LocalState := 1;

	1:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].AddToGroup
			(
				commandFeedback := _PlanarMoverFeedback[_i],
				group := _PlanarGroup
			);
		END_FOR
		_LocalState := 2;
	
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			CaAddAllMoversToGroup := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 3;
		END_IF
	
	3:
		_LocalState := 0;
		CaAddAllMoversToGroup := TRUE;
		
END_CASE		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CaDisable" Id="{3ab8dc0d-fff4-4533-b410-8fc93dfb2b62}" FolderPath="Methods\Collision Avoidance\">
      <Declaration><![CDATA[METHOD CaDisable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// WIP
// Enable planar group and add all movers

CASE _LocalState OF
	
	0:
		_LocalState := 1;

	1:
		_PlanarGroup.Disable(commandFeedback := _PlanarGroupFeedback);
		_LocalState := 2;
	
	2:
		IF _PlanarGroupFeedback.Done THEN
			_LocalState := 3;
		END_IF
	
	3:
		_LocalState := 0;
		CaDisable := TRUE;
		
END_CASE		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CaEnable" Id="{085262b9-e414-4a09-b997-7223676ed1df}" FolderPath="Methods\Collision Avoidance\">
      <Declaration><![CDATA[METHOD CaEnable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// WIP
// Enable planar group and add all movers

CASE _LocalState OF
	
	0:
		_LocalState := 1;

	1:
		_PlanarGroup.Enable(commandFeedback := _PlanarGroupFeedback);
		_LocalState := 2;
	
	2:
		IF _PlanarGroupFeedback.Done THEN
			_LocalState := 3;
		END_IF
	
	3:
		_LocalState := 0;
		CaEnable := TRUE;
		
END_CASE		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicUpdate" Id="{c7e9e683-b8ab-4217-b047-2e15baa6471c}" FolderPath="Methods\Power, Updates and Errors\">
      <Declaration><![CDATA[METHOD CyclicUpdate : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// Update method needs to be called cyclically


_PlanarGroup.Update();
_PlanarGroupFeedback.Update();


FOR _i := 1 TO _MoverCount DO
	

	_PlanarMover[_i].Update();
	_PlanarMoverFeedback[_i].Update();
		
	
	IF _PlanarMover[_i].MCTOPLC.STD.State = 3 THEN
		_Enabled[_i] := TRUE;
	ELSE
		_Enabled[_i] := FALSE;
	END_IF
	

	_Error[_i] := _PlanarMoverFeedback[_i].Error;
	_Busy[_i] := _PlanarMoverFeedback[_i].Busy;
	_Done[_i] := _PlanarMoverFeedback[_i].Done;
	_ErrorCode[_i] := _PlanarMoverFeedback[_i].ErrorId;
	IF _PlanarMoverFeedback[_i].ErrorId <> 0 THEN
		_ErrorCodePrevious[_i] := _PlanarMoverFeedback[_i].ErrorId;
	END_IF
	
	
	_MoveParameters[_i].Options.useOrientation := TRUE;
	_MoveParameters[_i].Constraints.SetValuesVADJ(V := _Velocity, A := _Acceleration, D := _Deceleration, J := _Jerk);
	_MoveParameters[_i].rotateOptions.additionalTurns := _NumberOfRotations;
	
	
	IF (_i MOD 2 <> 0) THEN
		_MoveParameters[_i].rotateOptions.direction := 1;
	ELSE
		_MoveParameters[_i].rotateOptions.direction := 3;
	END_IF
	
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="DecreaseMoverHeight" Id="{d9c1f541-a92b-457b-b498-ae0f9078990c}" FolderPath="Methods\Movements General\">
      <Declaration><![CDATA[METHOD PUBLIC DecreaseMoverHeight : BOOL
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers decrease height
	
CASE _LocalState OF
	
	0:
		_LocalState := 1;
	
	1:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 2.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 2;
	
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			DecreaseMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 2;
		END_IF

	3:
		DecreaseMoverHeight := TRUE;
		_LocalState := 0;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="DetectErrors" Id="{daaeb43c-d127-4004-8d5e-5bf5a68f458b}" FolderPath="Methods\Power, Updates and Errors\">
      <Declaration><![CDATA[METHOD DetectErrors : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// Error detection method

FOR _i := 1 TO _MoverCount DO
	IF _PlanarMover[_i].Error THEN
		_Error[_i] := TRUE;
		_LocalState := 0;
		_InternalCounter := 0;
		DetectErrors := TRUE;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisableMovers" Id="{425fd2bc-6f54-4fce-935d-1f0a1dc8c22b}" FolderPath="Methods\Power, Updates and Errors\">
      <Declaration><![CDATA[METHOD DisableMovers : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// Disable movers

CASE _LocalState OF
	
	0:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].Disable(_PlanarMoverFeedback[_i]);
		END_FOR
		_LocalState := 1;
	
	1:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			DisableMovers := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 2;
		END_IF
	
	2:
		_LocalState := 0;
		DisableMovers := TRUE;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableMovers" Id="{ecc31ae1-6e60-4543-ab06-14adb5849eca}" FolderPath="Methods\Power, Updates and Errors\">
      <Declaration><![CDATA[METHOD EnableMovers : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

// Enable movers

CASE _LocalState OF
	
	0:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].Enable(_PlanarMoverFeedback[_i]);
		END_FOR
		_LocalState := 1;
	
	1:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			EnableMovers := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 2;
		END_IF
	
	2:
		_LocalState := 0;
		EnableMovers := TRUE;

END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FollowTileEdge" Id="{87cfbbfe-b39c-4b51-8245-78953324c448}" FolderPath="Methods\Movements 2-Tile\">
      <Declaration><![CDATA[METHOD PUBLIC FollowTileEdge : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Movers move to edge of tiles and follow the perimeter, then move to home
	
CASE _LocalState OF
	
	0:
		_LocalState := 1;

	1:
		_MoveParameters[1].targetPosition.x := 180;
		_MoveParameters[1].targetPosition.y := 183;
		_MoveParameters[2].targetPosition.x := 296;
		_MoveParameters[2].targetPosition.y := 183;
		_LocalState := 2;
	
	2:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 3;
	
	3:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			FollowTileEdge := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 4;
		END_IF

	4:
		_MoveParameters[1].targetPosition.x := 57;
		_MoveParameters[1].targetPosition.y := 183;
		_MoveParameters[2].targetPosition.x := 423;
		_MoveParameters[2].targetPosition.y := 183;
		_LocalState := 5;
	
	5:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 6;
	
	6:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			FollowTileEdge := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 7;
		END_IF
		
	7:
		_MoveParameters[1].targetPosition.x := 57;
		_MoveParameters[1].targetPosition.y := 57;
		_MoveParameters[2].targetPosition.x := 423;
		_MoveParameters[2].targetPosition.y := 57;
		_LocalState := 8;
	
	8:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 9;
	
	9:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			FollowTileEdge := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 10;
		END_IF
		
	10:
		_MoveParameters[1].targetPosition.x := 180;
		_MoveParameters[1].targetPosition.y := 57;
		_MoveParameters[2].targetPosition.x := 296;
		_MoveParameters[2].targetPosition.y := 57;
		_LocalState := 11;
	
	11:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 12;
	
	12:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			FollowTileEdge := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 13;
		END_IF
		
	13:
		_MoveParameters[1].targetPosition.x := 120;
		_MoveParameters[1].targetPosition.y := 120;
		_MoveParameters[2].targetPosition.x := 360;
		_MoveParameters[2].targetPosition.y := 120;
		_LocalState := 14;
	
	14:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 15;
	
	15:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			FollowTileEdge := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 16;
		END_IF
		
	16:
		FollowTileEdge := TRUE;
		_LocalState := 0;
		
END_CASE		
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{c3147f7b-df53-4a91-a0c1-7a36cd9f6a0f}" FolderPath="Methods\Movements 2-Tile\">
      <Declaration><![CDATA[METHOD PUBLIC Home : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Move movers to the middle of tiles.
	
CASE _LocalState OF
		
	0:
		_LocalState := 1;
		
	1:
		_MoveParameters[1].targetPosition.x := 120;
		_MoveParameters[1].targetPosition.y := 120;
		_MoveParameters[2].targetPosition.x := 360;
		_MoveParameters[2].targetPosition.y := 120;
		_LocalState := 2;
		
	2:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 3;
		
	3:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Home := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 4;
		END_IF
		
	4:
		Home := TRUE;
		_LocalState := 0;
		
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="MeasureWeightOnTile" Id="{96492394-9694-43ad-b71b-299c9f9b441f}" FolderPath="Methods\Utility\">
      <Declaration><![CDATA[METHOD MeasureWeightOnTile : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// WIP
// Measures the weight of an object on a tile

]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverAcceleration" Id="{46b26c09-adf7-42f2-a584-23d59417babe}" FolderPath="Properties\Mover Attributes\">
      <Declaration><![CDATA[PROPERTY MoverAcceleration : LREAL]]></Declaration>
      <Get Name="Get" Id="{f150d898-6fb7-4350-b36b-5cbdc8b0e614}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverAcceleration := _Acceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1e98ee18-12de-4aa7-9a0d-740e3225678d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (MoverAcceleration <= 0) OR (MoverAcceleration > 20000) THEN
	_Acceleration := 20000;
ELSE
	_Acceleration := MoverAcceleration;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverBusy" Id="{c11cbac8-4b91-4966-89dc-ba7f5f7a86e5}" FolderPath="Properties\Mover State\">
      <Declaration><![CDATA[PROPERTY MoverBusy : ARRAY [1.._MoverCount] OF BOOL]]></Declaration>
      <Get Name="Get" Id="{11aeb304-4070-4226-af8d-d2d079a16cb2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverBusy := _Busy;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a64319f7-49c7-45c5-8c7c-696c6cd16b0c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverDeceleration" Id="{6dc3dcb8-27e4-496b-9d9d-8aa4ebb3da14}" FolderPath="Properties\Mover Attributes\">
      <Declaration><![CDATA[PROPERTY MoverDeceleration : LREAL]]></Declaration>
      <Get Name="Get" Id="{884afb94-efd9-439f-bae0-ba17499a176f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverDeceleration := _Deceleration;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3a58c369-418e-4c69-93da-10a00e2004ff}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (MoverDeceleration <= 0) OR (MoverDeceleration > 20000) THEN
	_Deceleration := 20000;
ELSE
	_Deceleration := MoverDeceleration;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverDone" Id="{0308a3d0-d1cc-4686-90bb-ac9fea206c73}" FolderPath="Properties\Mover State\">
      <Declaration><![CDATA[PROPERTY MoverDone : Array [1.._MoverCount] OF BOOL]]></Declaration>
      <Get Name="Get" Id="{1fd5ba50-2e56-4979-80ff-6666360b5759}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverDone := _Done;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{54a4b7e1-5dca-49b5-a349-838350c87603}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverEnabled" Id="{bf7036cc-91b4-4c09-8cba-99551446a777}" FolderPath="Properties\Mover State\">
      <Declaration><![CDATA[PROPERTY MoverEnabled : ARRAY [1.._MoverCount] OF BOOL]]></Declaration>
      <Get Name="Get" Id="{d6f3e017-f9bf-4317-98fd-53879d82659d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverEnabled := _Enabled;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d726d8f1-d341-41cd-baa6-0ab1499fcfe0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverError" Id="{c577a3a6-2f4c-4698-be42-7d3dcfd67637}" FolderPath="Properties\Mover State\">
      <Declaration><![CDATA[PROPERTY MoverError : ARRAY [1.._MoverCount] OF BOOL]]></Declaration>
      <Get Name="Get" Id="{3da9024b-2595-450f-b564-b70a3f12a472}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverError := _Error;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{edc652b5-28b5-4c71-898d-884237775223}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverJerk" Id="{5a9d4136-5d1c-4a75-87a5-d8c9624b6c9e}" FolderPath="Properties\Mover Attributes\">
      <Declaration><![CDATA[PROPERTY MoverJerk : LREAL]]></Declaration>
      <Get Name="Get" Id="{b43c6ed6-c2d3-4a6f-931b-a00f7c04025f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverJerk := _Jerk;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{696042f5-0b2f-4a29-8189-8bd8a33370cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (MoverJerk <= 0) OR (MoverJerk > 200000) THEN
	_Jerk := 200000;
ELSE
	_Jerk := MoverJerk;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverLastErrorCode" Id="{41c8e50d-73dc-403c-8e5c-5a1c2f0c7422}" FolderPath="Properties\Mover State\">
      <Declaration><![CDATA[PROPERTY MoverLastErrorCode : ARRAY [1.._MoverCount] OF UDINT]]></Declaration>
      <Get Name="Get" Id="{aac205f3-6f08-4c19-a3ae-59b6bbdcb5dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverLastErrorCode := _ErrorCodePrevious;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{25db58ed-2c46-4ac5-a2b3-194394a9e4b8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverNumberOfRotations" Id="{bb4ff67d-7367-4b7a-959f-713804187620}" FolderPath="Properties\Mover Attributes\">
      <Declaration><![CDATA[PROPERTY MoverNumberOfRotations : UDINT]]></Declaration>
      <Get Name="Get" Id="{5b9291ce-f4c0-4cba-bab1-5877eaf99aad}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverNumberOfRotations := _NumberOfRotations;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d5eb936f-7c12-4a48-8ac9-c0d81b0e38d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (MoverNumberOfRotations < 0) THEN
	_NumberOfRotations := 0;
ELSE
	_NumberOfRotations := MoverNumberOfRotations;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverVelocity" Id="{742b6ed5-8994-47d0-9514-f9da80a4d053}" FolderPath="Properties\Mover Attributes\">
      <Declaration><![CDATA[PROPERTY MoverVelocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{a39c28bf-5625-4f47-9c93-b9492438d570}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverVelocity := _Velocity;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d4daa692-d037-4d79-8e53-0169ed18b08c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (MoverVelocity <= 0) OR (MoverVelocity > 2000) THEN
	_Velocity := 2000;
ELSE
	_Velocity := MoverVelocity;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ResetErrors" Id="{3c8381a0-95d7-49ca-b1ac-a766e6689e5f}" FolderPath="Methods\Power, Updates and Errors\">
      <Declaration><![CDATA[METHOD ResetErrors : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Reset errors

CASE _LocalState OF
	
	0: 
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].Reset(_PlanarMoverFeedback[_i]);
		END_FOR
		_LocalState := 1;
	
	1:	
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			ResetErrors := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 2;
		END_IF

			
	2:
		_LocalState := 0;
		_ErrorCount := _ErrorCount + 1;
		ResetErrors := TRUE;
	
END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Spin" Id="{c0469bb5-8daf-4d6a-9025-07ed0e9b795c}" FolderPath="Methods\Movements General\">
      <Declaration><![CDATA[METHOD PUBLIC Spin : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers spin

CASE _LocalState OF
	
	0:
		_LocalState := 1;

	
	1:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveC
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 0,
				constraint			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].rotateOptions
			);
		END_FOR
		_LocalState := 2;
	
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Spin := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 3;
		END_IF
		
	3:
		Spin := TRUE;
		_LocalState := 0;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwapPlaces" Id="{2b69bc2c-8a8e-489d-9688-bbcbb0285218}" FolderPath="Methods\Movements 2-Tile\">
      <Declaration><![CDATA[METHOD PUBLIC SwapPlaces : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers swap tiles, then swap back, then move to home
	
CASE _LocalState OF
	
	0:
		_LocalState := 1;

	1:
		_MoveParameters[1].targetPosition.x := 175;
		_MoveParameters[1].targetPosition.y := 183;
		_MoveParameters[2].targetPosition.x := 301;
		_MoveParameters[2].targetPosition.y := 57;
		_LocalState := 2;
	
	2:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 3;
	
	3:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			SwapPlaces := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 4;
		END_IF

	4:
		_MoveParameters[1].targetPosition.x := 301;
		_MoveParameters[1].targetPosition.y := 183;
		_MoveParameters[2].targetPosition.x := 175;
		_MoveParameters[2].targetPosition.y := 57;
		_LocalState := 5;
	
	5:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 6;
	
	6:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			SwapPlaces := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 7;
		END_IF
		
	7:
		_MoveParameters[1].targetPosition.x := 301;
		_MoveParameters[1].targetPosition.y := 57;
		_MoveParameters[2].targetPosition.x := 175;
		_MoveParameters[2].targetPosition.y := 183;
		_LocalState := 8;
	
	8:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 9;
	
	9:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			SwapPlaces := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 10;
		END_IF
		
	10:
		_MoveParameters[1].targetPosition.x := 175;
		_MoveParameters[1].targetPosition.y := 57;
		_MoveParameters[2].targetPosition.x := 301;
		_MoveParameters[2].targetPosition.y := 183;
		_LocalState := 11;
	
	11:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 12;
	
	12:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			SwapPlaces := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 13;
		END_IF
		
	13:
		_MoveParameters[1].targetPosition.x := 120;
		_MoveParameters[1].targetPosition.y := 120;
		_MoveParameters[2].targetPosition.x := 360;
		_MoveParameters[2].targetPosition.y := 120;
		_LocalState := 14;
	
	14:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveToPosition
			(
				commandFeedback 	:= _PlanarMoverFeedback[_i],
				targetPosition 		:= _MoveParameters[_i].targetPosition,
				constraint 			:= _MoveParameters[_i].Constraints,
				options 			:= _MoveParameters[_i].Options
			);
		END_FOR
		_LocalState := 15;
	
	15:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			SwapPlaces := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 16;
		END_IF
		
	16:
		SwapPlaces := TRUE;
		_LocalState := 0;
		
END_CASE		]]></ST>
      </Implementation>
    </Method>
    <Method Name="Tilt" Id="{42665e86-4a61-4716-bd60-3a2489faf341}" FolderPath="Methods\Movements General\">
      <Declaration><![CDATA[METHOD PUBLIC Tilt : BOOL
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers tilt

CASE _LocalState OF
	
	0:
		_LocalState := 1;
		
	1:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 5.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 2;
	
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 3;
		END_IF

	
	3:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveA
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 4.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 4;
	
	4:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 5;
		END_IF
		
	5:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveA
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= -4.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 6;
	
	6:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 7;
		END_IF
	
	7:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveA
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 0.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 8;
	
	8:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 9;
		END_IF
		
	9:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveB
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 4.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 10;
	
	10:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 11;
		END_IF
		
	11:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveB
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= -4.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 12;
	
	12:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 13;
		END_IF
	
	13:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveB
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 0.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 14;
	
	14:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 15;
		END_IF
		
	15:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 2.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 16;
	
	16:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			Tilt := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 17;
		END_IF
		
	17:
		Tilt := TRUE;
		_LocalState := 0;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="VaryMoverHeight" Id="{3f462c74-2326-4182-a953-36e0d5d57b05}" FolderPath="Methods\Movements General\">
      <Declaration><![CDATA[METHOD PUBLIC VaryMoverHeight : BOOL
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers vary their height multiple times

CASE _LocalState OF
	
	0:
		_LocalState := 1;
	
	1:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 5.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 2;
	
	2:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			VaryMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 3;
		END_IF
		
	3:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 2.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 4;
	
	4:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			VaryMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 5;
		END_IF
		
	5:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 5.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 6;
	
	6:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			VaryMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 7;
		END_IF
		
	7:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 2.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 8;
	
	8:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			VaryMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 9;
		END_IF
		
	9:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 5.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 10;
	
	10:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			VaryMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 11;
		END_IF

	11:
		FOR _i := 1 TO _MoverCount DO
			_PlanarMover[_i].MoveZ
			(	
				commandFeedback		:= _PlanarMoverFeedback[_i],
				targetPosition		:= 2.0,
				constraint			:= _MoveParameters[_i].Constraints
			);
		END_FOR
		_LocalState := 12;
	
	12:
		_CommandDone := TRUE;
		FOR _i := 1 TO _MoverCount DO
			IF NOT(_PlanarMoverFeedback[_i].Done) THEN
				_CommandDone := FALSE;
				_InternalCounter := _InternalCounter + 1;
			END_IF
		END_FOR
		
		IF _InternalCounter >= 10000 THEN
			_LocalState := 0;
			_InternalCounter := 0;
			VaryMoverHeight := FALSE;
		END_IF
		
		IF _CommandDone THEN
			_CommandDone := FALSE;
			_InternalCounter := 0;
			_LocalState := 13;
		END_IF
		
	13:
		VaryMoverHeight := TRUE;
		_LocalState := 0;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="xPlanarControl.CaAddAllMoversToGroup">
      <LineId Id="80" Count="0" />
      <LineId Id="31" Count="8" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="3" />
      <LineId Id="53" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="59" Count="5" />
      <LineId Id="45" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="9" />
      <LineId Id="66" Count="0" />
      <LineId Id="46" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.CaDisable">
      <LineId Id="6" Count="21" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.CaEnable">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="6" />
      <LineId Id="18" Count="3" />
      <LineId Id="30" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="32" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.CyclicUpdate">
      <LineId Id="81" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="88" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="58" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.DecreaseMoverHeight">
      <LineId Id="48" Count="1" />
      <LineId Id="52" Count="4" />
      <LineId Id="58" Count="12" />
      <LineId Id="92" Count="17" />
      <LineId Id="76" Count="3" />
      <LineId Id="86" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.DetectErrors">
      <LineId Id="62" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.DisableMovers">
      <LineId Id="152" Count="0" />
      <LineId Id="147" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="109" Count="2" />
      <LineId Id="113" Count="15" />
      <LineId Id="141" Count="0" />
      <LineId Id="129" Count="4" />
      <LineId Id="143" Count="0" />
      <LineId Id="134" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.EnableMovers">
      <LineId Id="101" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="52" Count="7" />
      <LineId Id="80" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="63" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="66" Count="3" />
      <LineId Id="90" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.FollowTileEdge">
      <LineId Id="622" Count="211" />
      <LineId Id="522" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.Home">
      <LineId Id="166" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="138" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="145" Count="8" />
      <LineId Id="144" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="179" Count="17" />
      <LineId Id="155" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="174" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="130" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MeasureWeightOnTile">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverAcceleration.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverAcceleration.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverBusy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverBusy.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverDeceleration.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverDeceleration.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverDone.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverEnabled.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverEnabled.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverError.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverError.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverJerk.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverJerk.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverLastErrorCode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverLastErrorCode.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverNumberOfRotations.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverNumberOfRotations.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverVelocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.MoverVelocity.Set">
      <LineId Id="5" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.ResetErrors">
      <LineId Id="65" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="43" Count="5" />
      <LineId Id="41" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="51" Count="7" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.Spin">
      <LineId Id="196" Count="1" />
      <LineId Id="202" Count="13" />
      <LineId Id="331" Count="0" />
      <LineId Id="216" Count="4" />
      <LineId Id="340" Count="17" />
      <LineId Id="226" Count="2" />
      <LineId Id="333" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.SwapPlaces">
      <LineId Id="514" Count="1" />
      <LineId Id="7" Count="2" />
      <LineId Id="355" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="327" Count="1" />
      <LineId Id="330" Count="4" />
      <LineId Id="336" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="337" Count="2" />
      <LineId Id="529" Count="17" />
      <LineId Id="340" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="389" Count="2" />
      <LineId Id="366" Count="15" />
      <LineId Id="547" Count="17" />
      <LineId Id="350" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="445" Count="2" />
      <LineId Id="422" Count="15" />
      <LineId Id="565" Count="17" />
      <LineId Id="417" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="476" Count="2" />
      <LineId Id="453" Count="15" />
      <LineId Id="583" Count="17" />
      <LineId Id="448" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="507" Count="2" />
      <LineId Id="484" Count="15" />
      <LineId Id="601" Count="17" />
      <LineId Id="479" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="352" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.Tilt">
      <LineId Id="277" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="297" Count="1" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="11" />
      <LineId Id="469" Count="17" />
      <LineId Id="428" Count="0" />
      <LineId Id="306" Count="13" />
      <LineId Id="487" Count="17" />
      <LineId Id="325" Count="13" />
      <LineId Id="505" Count="17" />
      <LineId Id="303" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="346" Count="11" />
      <LineId Id="523" Count="17" />
      <LineId Id="363" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="367" Count="11" />
      <LineId Id="541" Count="17" />
      <LineId Id="384" Count="13" />
      <LineId Id="559" Count="17" />
      <LineId Id="403" Count="13" />
      <LineId Id="577" Count="17" />
      <LineId Id="366" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="448" Count="11" />
      <LineId Id="595" Count="17" />
      <LineId Id="447" Count="0" />
      <LineId Id="422" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="299" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarControl.VaryMoverHeight">
      <LineId Id="66" Count="1" />
      <LineId Id="70" Count="4" />
      <LineId Id="82" Count="2" />
      <LineId Id="163" Count="4" />
      <LineId Id="91" Count="4" />
      <LineId Id="280" Count="17" />
      <LineId Id="101" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="11" />
      <LineId Id="298" Count="17" />
      <LineId Id="176" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="11" />
      <LineId Id="316" Count="17" />
      <LineId Id="195" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="11" />
      <LineId Id="334" Count="17" />
      <LineId Id="214" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="234" Count="11" />
      <LineId Id="352" Count="17" />
      <LineId Id="233" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="253" Count="11" />
      <LineId Id="370" Count="17" />
      <LineId Id="251" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="65" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>