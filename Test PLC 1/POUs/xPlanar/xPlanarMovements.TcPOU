<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="xPlanarMovements" Id="{61237aaa-fa06-4339-bbeb-d7ee6e21aecc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK xPlanarMovements
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	Running			: BYTE;
	i				: BYTE;
	MainState		: BYTE;
	State			: BYTE;
	
	MoveParameters	: ARRAY [1..xPlanarLink.MoverCount] OF ST_MoverParameters;
	
	EndTimer		: TON;
	MidTimer		: TON;
	
	StartSequence	: BOOL;
	CommandDone		: BOOL;
	MoveDone		: BOOL;
	
	Velocity		: LREAL := 2000;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="DecreaseMoverHeight" Id="{b14d889b-19a0-45d9-a416-bc5f9f09ddd4}">
      <Declaration><![CDATA[METHOD PUBLIC DecreaseMoverHeight : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers go a bit low

IF Run THEN

	MoveDone := FALSE;
	
	CASE State OF
		
		0:
			State := 1;
	
		
		1:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 2.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 2;
		
		2:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 3;
			END_IF
	
		3:
			MoveDone := TRUE;
			State := 0;
	
	END_CASE

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DefineParameters" Id="{e0aafccf-9e5d-40fc-89f7-7cde95b1d36f}">
      <Declaration><![CDATA[METHOD DefineParameters : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Define the movement parameters for this demo

MoveParameters[1].Options.useOrientation := TRUE;
MoveParameters[1].Constraints.SetValuesVADJ(V := Velocity, A := 20000, D := 20000, J := 200000);
MoveParameters[1].rotateOptions.additionalTurns := 5;
MoveParameters[1].rotateOptions.direction := 1;

MoveParameters[2].Options.useOrientation := TRUE;
MoveParameters[2].Constraints.SetValuesVADJ(V := Velocity, A := 20000, D := 20000, J := 200000);
MoveParameters[2].rotateOptions.additionalTurns := 5;
MoveParameters[2].rotateOptions.direction := 3;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DelayBetweenMoves" Id="{75868d57-7e3a-4bf5-96ba-8ac467e4a3b3}">
      <Declaration><![CDATA[METHOD DelayBetweenMoves : BOOL
VAR_INPUT
	Start		: BOOL;
	Delay		: TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MoveDone := FALSE;

MidTimer(IN := Start, PT := Delay);

IF MidTimer.Q THEN
	MoveDone := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="EndDelay" Id="{8a494a48-74fe-48d2-9bf0-974a9c61f4ff}">
      <Declaration><![CDATA[METHOD EndDelay : BOOL
VAR_INPUT
	Start		: BOOL;
	Delay		: TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
MoveDone := FALSE;

EndTimer(IN := Start, PT := Delay);

IF EndTimer.Q THEN
	MoveDone := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FollowTileEdge" Id="{d6a47a68-e1e2-4f06-a26f-1c1effc568f1}">
      <Declaration><![CDATA[METHOD PUBLIC FollowTileEdge : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers move to edge of tiles and follow the perimeter, then move to home

IF Run THEN

	MoveDone := FALSE;
	
	CASE State OF
		
		0:
			State := 1;
	
		1:
			MoveParameters[1].targetPosition.x := 180;
			MoveParameters[1].targetPosition.y := 183;
			MoveParameters[2].targetPosition.x := 296;
			MoveParameters[2].targetPosition.y := 183;
			State := 2;
		
		2:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 3;
		
		3:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				CommandDone := xPlanarLink.PlanarFeedback[i].Done;
			END_FOR
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 4;
			END_IF
	
		4:
			moveParameters[1].targetPosition.x := 57;
			moveParameters[1].targetPosition.y := 183;
			moveParameters[2].targetPosition.x := 423;
			moveParameters[2].targetPosition.y := 183;
			State := 5;
		
		5:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 6;
		
		6:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				CommandDone := xPlanarLink.PlanarFeedback[i].Done;
			END_FOR
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 7;
			END_IF
			
		7:
			moveParameters[1].targetPosition.x := 57;
			moveParameters[1].targetPosition.y := 57;
			moveParameters[2].targetPosition.x := 423;
			moveParameters[2].targetPosition.y := 57;
			State := 8;
		
		8:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 9;
		
		9:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				CommandDone := xPlanarLink.PlanarFeedback[i].Done;
			END_FOR
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 10;
			END_IF
			
		10:
			moveParameters[1].targetPosition.x := 180;
			moveParameters[1].targetPosition.y := 57;
			moveParameters[2].targetPosition.x := 296;
			moveParameters[2].targetPosition.y := 57;
			State := 11;
		
		11:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 12;
		
		12:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				CommandDone := xPlanarLink.PlanarFeedback[i].Done;
			END_FOR
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 13;
			END_IF
			
		13:
			moveParameters[1].targetPosition.x := 120;
			moveParameters[1].targetPosition.y := 120;
			moveParameters[2].targetPosition.x := 360;
			moveParameters[2].targetPosition.y := 120;
			State := 14;
		
		14:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 15;
		
		15:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				CommandDone := xPlanarLink.PlanarFeedback[i].Done;
			END_FOR
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 16;
			END_IF
			
		16:
			MoveDone := TRUE;
			State := 0;
			
	END_CASE		

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{d2cf8f88-7414-44ed-bbfa-414960b0aded}">
      <Declaration><![CDATA[METHOD PUBLIC Home : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Move movers to the middle of tiles.
IF Run THEN

	MoveDone := FALSE;
	
	CASE State OF
			
		0:
			State := 1;
			
		1:
			moveParameters[1].targetPosition.x := 120;
			moveParameters[1].targetPosition.y := 120;
			moveParameters[2].targetPosition.x := 360;
			moveParameters[2].targetPosition.y := 120;
			State := 2;
			
		2:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 3;
			
		3:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 4;
			END_IF
			
		4:
			MoveDone := TRUE;
			State := 0;
			
			
	END_CASE

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Spin" Id="{5209d939-b863-4f1c-b951-9ae97fddb209}">
      <Declaration><![CDATA[METHOD PUBLIC Spin : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[



// Movers spin

IF Run THEN
	
	MoveDone := FALSE;
	
	CASE State OF
		
		0:
			State := 1;
	
		
		1:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveC
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 0,
					constraint			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].rotateOptions
				);
			END_FOR
			State := 2;
		
		2:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 3;
			END_IF
			
		3:
			MoveDone := TRUE;
			State := 0;
		
	END_CASE
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SwapPlaces" Id="{5134322d-04a7-4bd7-abf6-69c5d4a51d36}">
      <Declaration><![CDATA[METHOD PUBLIC SwapPlaces : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers swap tiles, then swap back, then move to home

IF Run THEN
	
	MoveDone := FALSE;
	
	CASE State OF
		
		0:
			State := 1;
	
		1:
			MoveParameters[1].targetPosition.x := 175;
			MoveParameters[1].targetPosition.y := 183;
			MoveParameters[2].targetPosition.x := 301;
			MoveParameters[2].targetPosition.y := 57;
			State := 2;
		
		2:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 3;
		
		3:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 4;
			END_IF
	
		4:
			moveParameters[1].targetPosition.x := 301;
			moveParameters[1].targetPosition.y := 183;
			moveParameters[2].targetPosition.x := 175;
			moveParameters[2].targetPosition.y := 57;
			State := 5;
		
		5:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 6;
		
		6:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 7;
			END_IF
			
		7:
			moveParameters[1].targetPosition.x := 301;
			moveParameters[1].targetPosition.y := 57;
			moveParameters[2].targetPosition.x := 175;
			moveParameters[2].targetPosition.y := 183;
			State := 8;
		
		8:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 9;
		
		9:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 10;
			END_IF
			
		10:
			moveParameters[1].targetPosition.x := 175;
			moveParameters[1].targetPosition.y := 57;
			moveParameters[2].targetPosition.x := 301;
			moveParameters[2].targetPosition.y := 183;
			State := 11;
		
		11:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 12;
		
		12:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 13;
			END_IF
			
		13:
			moveParameters[1].targetPosition.x := 120;
			moveParameters[1].targetPosition.y := 120;
			moveParameters[2].targetPosition.x := 360;
			moveParameters[2].targetPosition.y := 120;
			State := 14;
		
		14:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveToPosition
				(
					commandFeedback 	:= xPlanarLink.PlanarFeedback[i],
					targetPosition 		:= MoveParameters[i].targetPosition,
					constraint 			:= MoveParameters[i].Constraints,
					options 			:= MoveParameters[i].Options
				);
			END_FOR
			State := 15;
		
		15:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 16;
			END_IF
			
		16:
			MoveDone := TRUE;
			State := 0;
			
	END_CASE		
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Tilt" Id="{4ecde7e2-fe03-4893-8dad-a4278fecb2b2}">
      <Declaration><![CDATA[METHOD PUBLIC Tilt : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers tilt

IF Run THEN
	
	MoveDone := FALSE;
	
	CASE State OF
		
		0:
			State := 1;
			
		1:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 5.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 2;
		
		2:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 3;
			END_IF
	
		
		3:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveA
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 4.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 4;
		
		4:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 5;
			END_IF
			
		5:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveA
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= -4.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 6;
		
		6:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 7;
			END_IF
		
		7:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveA
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 0.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 8;
		
		8:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 9;
			END_IF
			
		9:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveB
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 4.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 10;
		
		10:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 11;
			END_IF
			
		11:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveB
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= -4.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 12;
		
		12:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 13;
			END_IF
		
		13:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveB
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 0.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 14;
		
		14:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 15;
			END_IF
			
		15:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 2.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 16;
		
		16:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 17;
			END_IF
			
		17:
			MoveDone := TRUE;
			State := 0;
			
		
	END_CASE
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="VaryMoverHeight" Id="{ab0c66ae-7e12-4764-9704-cca2fb9445e1}">
      <Declaration><![CDATA[METHOD PUBLIC VaryMoverHeight : BOOL
VAR_INPUT
	Run		: BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Movers go a bit high

IF Run THEN
	
	MoveDone := FALSE;
	
	CASE State OF
		
		0:
			State := 1;
	
		
		1:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 5.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 2;
		
		2:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 3;
			END_IF
			
		3:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 2.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 4;
		
		4:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 5;
			END_IF
			
		5:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 5.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 6;
		
		6:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 7;
			END_IF
			
		7:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 2.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 8;
		
		8:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 9;
			END_IF
			
		9:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 5.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 10;
		
		10:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 11;
			END_IF
	
		11:
			FOR i := 1 TO xPlanarLink.MoverCount DO
				xPlanarLink.PlanarMover[i].MoveZ
				(	
					commandFeedback		:= xPlanarLink.PlanarFeedback[i],
					targetPosition		:= 2.0,
					constraint			:= MoveParameters[i].Constraints
				);
			END_FOR
			State := 12;
		
		12:
			CommandDone := xPlanarLink.PlanarFeedback[1].Done AND xPlanarLink.PlanarFeedback[2].Done;
			
			IF CommandDone THEN
				CommandDone := FALSE;
				State := 13;
			END_IF
			
		13:
			MoveDone := TRUE;
			State := 0;
	
	END_CASE
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="xPlanarMovements">
      <LineId Id="149" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarMovements.DecreaseMoverHeight">
      <LineId Id="48" Count="1" />
      <LineId Id="82" Count="1" />
      <LineId Id="50" Count="29" />
      <LineId Id="86" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="84" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarMovements.DefineParameters">
      <LineId Id="24" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarMovements.DelayBetweenMoves">
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="18" Count="1" />
    </LineIds>
    <LineIds Name="xPlanarMovements.EndDelay">
      <LineId Id="9" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarMovements.FollowTileEdge">
      <LineId Id="514" Count="1" />
      <LineId Id="521" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="355" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="327" Count="1" />
      <LineId Id="330" Count="4" />
      <LineId Id="336" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="337" Count="2" />
      <LineId Id="341" Count="3" />
      <LineId Id="348" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="389" Count="2" />
      <LineId Id="366" Count="22" />
      <LineId Id="350" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="445" Count="2" />
      <LineId Id="422" Count="22" />
      <LineId Id="417" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="476" Count="2" />
      <LineId Id="453" Count="22" />
      <LineId Id="448" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="507" Count="2" />
      <LineId Id="484" Count="22" />
      <LineId Id="479" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="523" Count="0" />
      <LineId Id="522" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarMovements.Home">
      <LineId Id="166" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="135" Count="1" />
      <LineId Id="138" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="145" Count="8" />
      <LineId Id="144" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="4" />
      <LineId Id="155" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="174" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="172" Count="0" />
    </LineIds>
    <LineIds Name="xPlanarMovements.Spin">
      <LineId Id="193" Count="22" />
      <LineId Id="331" Count="0" />
      <LineId Id="216" Count="12" />
      <LineId Id="333" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="334" Count="1" />
    </LineIds>
    <LineIds Name="xPlanarMovements.SwapPlaces">
      <LineId Id="514" Count="1" />
      <LineId Id="520" Count="1" />
      <LineId Id="313" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="355" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="327" Count="1" />
      <LineId Id="330" Count="4" />
      <LineId Id="336" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="337" Count="2" />
      <LineId Id="343" Count="1" />
      <LineId Id="348" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="360" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="389" Count="2" />
      <LineId Id="366" Count="15" />
      <LineId Id="384" Count="4" />
      <LineId Id="350" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="418" Count="0" />
      <LineId Id="445" Count="2" />
      <LineId Id="422" Count="15" />
      <LineId Id="440" Count="4" />
      <LineId Id="417" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="476" Count="2" />
      <LineId Id="453" Count="15" />
      <LineId Id="471" Count="4" />
      <LineId Id="448" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="507" Count="2" />
      <LineId Id="484" Count="15" />
      <LineId Id="502" Count="4" />
      <LineId Id="479" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="524" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="522" Count="1" />
    </LineIds>
    <LineIds Name="xPlanarMovements.Tilt">
      <LineId Id="277" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="294" Count="4" />
      <LineId Id="302" Count="0" />
      <LineId Id="304" Count="1" />
      <LineId Id="427" Count="0" />
      <LineId Id="429" Count="16" />
      <LineId Id="428" Count="0" />
      <LineId Id="306" Count="37" />
      <LineId Id="303" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="346" Count="17" />
      <LineId Id="365" Count="0" />
      <LineId Id="367" Count="54" />
      <LineId Id="366" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="448" Count="16" />
      <LineId Id="447" Count="0" />
      <LineId Id="422" Count="1" />
      <LineId Id="426" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="299" Count="2" />
    </LineIds>
    <LineIds Name="xPlanarMovements.VaryMoverHeight">
      <LineId Id="66" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="68" Count="6" />
      <LineId Id="81" Count="3" />
      <LineId Id="163" Count="4" />
      <LineId Id="91" Count="10" />
      <LineId Id="175" Count="0" />
      <LineId Id="177" Count="16" />
      <LineId Id="176" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="16" />
      <LineId Id="195" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="16" />
      <LineId Id="214" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="234" Count="16" />
      <LineId Id="233" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="253" Count="16" />
      <LineId Id="251" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="172" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>